<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeMatrix</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liu-jiarui.github.com/"/>
  <updated>2019-04-25T16:12:32.737Z</updated>
  <id>http://liu-jiarui.github.com/</id>
  
  <author>
    <name>jrliu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://liu-jiarui.github.com/2019/04/26/HashMap%E4%B8%8EHashSet/"/>
    <id>http://liu-jiarui.github.com/2019/04/26/HashMap与HashSet/</id>
    <published>2019-04-25T16:12:32.737Z</published>
    <updated>2019-04-25T16:12:32.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初探HashSet-and-HashMap"><a href="#初探HashSet-and-HashMap" class="headerlink" title="初探HashSet and HashMap"></a>初探HashSet and HashMap</h1><h2 id="1-总体介绍"><a href="#1-总体介绍" class="headerlink" title="1.总体介绍"></a>1.总体介绍</h2><a id="more"></a><p> HashSet和HashMap在Java里有着相同的实现，前者仅仅是对后者做了一层包装。因此本文将重点分析HashMap。HashMap实现了Map接口，即允许放入key为null的元素，也允许插入value为null的元素(注意HashTable不可以)；除该类未实现同步外（HashTable支持），其余跟Hashtable大致相同；跟TreeMap不同，该容器不保证元素顺序，根据需要该容器可能会对元素重新哈希，元素的顺序也会被重新打散，因此不同时间迭代同一个HashMap的顺序可能会不同。 根据对冲突的处理方式不同，哈希表有两种实现方式，一种开放地址方式（Open addressing），另一种是冲突链表方式（Separate chaining with linked lists）。Java HashMap采用的是冲突链表方式。<br><img src="en-resource://database/695:1" alt="b7109b21c593d0af05ff7e1301a8a14a.png"></p><p>从上图容易看出，如果选择合适的哈希函数，put()和get()方法可以在常数时间内完成。但在对HashMap进行迭代时，需要遍历整个table以及后面跟的冲突链表。因此对于迭代比较频繁的场景，不宜将HashMap的初始大小设的过大。有两个参数可以影响HashMap的性能：初始容量（inital capacity）和负载系数（load factor）。初始容量指定了初始table的大小，负载系数用来指定自动扩容的临界值。当entry的数量超过capacity*load_factor时，容器将自动扩容并重新哈希。对于插入元素较多的场景，将初始容量设大可以减少重新哈希的次数。将对象放入到HashMap或HashSet中时，有两个方法需要特别关心：hashCode()和equals()。hashCode()方法决定了对象会被放到哪个bucket里，当多个对象的哈希值冲突时，equals()方法决定了这些对象是否是“同一个对象”。所以，如果要将自定义的对象放入到HashMap或HashSet中，需重载hashCode()和equals()方法。</p><h2 id="2-方法剖析"><a href="#2-方法剖析" class="headerlink" title="2.方法剖析"></a>2.方法剖析</h2><p>get()<br>get(Object key)方法根据指定的key值返回对应的value，该方法调用了getEntry(Object key)得到相应的entry，然后返回entry.getValue()。因此getEntry()是算法的核心。 算法思想是首先通过hash()函数得到对应bucket的下标，然后依次遍历冲突链表，通过key.equals(k)方法来判断是否是要找的那个entry。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初探HashSet-and-HashMap&quot;&gt;&lt;a href=&quot;#初探HashSet-and-HashMap&quot; class=&quot;headerlink&quot; title=&quot;初探HashSet and HashMap&quot;&gt;&lt;/a&gt;初探HashSet and HashMap&lt;/h1&gt;&lt;h2 id=&quot;1-总体介绍&quot;&gt;&lt;a href=&quot;#1-总体介绍&quot; class=&quot;headerlink&quot; title=&quot;1.总体介绍&quot;&gt;&lt;/a&gt;1.总体介绍&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo+github搭建私人博客</title>
    <link href="http://liu-jiarui.github.com/2019/04/25/hexo-github%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://liu-jiarui.github.com/2019/04/25/hexo-github搭建私人博客/</id>
    <published>2019-04-25T15:30:48.000Z</published>
    <updated>2019-04-25T16:11:57.209Z</updated>
    
    <content type="html"><![CDATA[<p>A. 首先创建一个文件夹，如blog，用来存放hexo的配置文件等，然后进入blog进行操作。</p><ol><li>初始化<br>右键 git bash，执行以下命令:<br>hexo init</li><li>安装依赖包<br>npm install</li><li>生成静态页面<br>hexo generate或者hexo g<a id="more"></a></li><li>本地运行<br>hexo server或者hexo s<br>打开浏览器，在地址栏输入localhost:4000，就可以看到我们搭建好的本地博客了。到此只是搭建好了本地博客，还需要将博客部署到github上。</li></ol><p>B. 配置github</p><ol><li>新建repository<br>建立与你用户名对应的仓库，仓库名必须为【 your_username.github.io】，例如我的是liu-jiarui.github.io。</li><li>部署博客<br>进入你的hexo文件夹根目录下，用编辑器打开_config.yml，修改deploy项，如下（根据你的github进行相应更改）：<br>deploy:<br>type: git       #注意：有的版本type是github<br>repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:liu-jiarui/liu-jiarui.github.io.git<br>branch: master</li></ol><p>此时就完成部署了用浏览器访问liu-jiarui.github.io即可(第一次发布可能会有10分钟的延迟)。<br>每次修改完本地的文件后要执行以下命令，重新部署到github上：<br>hexo clean<br>hexo generate<br>hexo deploy或者hexo d</p><p>C. 常用命令如下：<br>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub<br>hexo help # 查看帮助<br>hexo version #查看Hexo的版本<br>报错总结<br>1.出现 error deployer not found:git 或者 error deployer not found:github 的错误<br>解决办法：执行 npm install hexo-deployer-git –save<br>2.出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: … 错误<br>解决办法：_config.yml中配置项的冒号后面要用空格隔开，再跟内容<br>3.中文乱码问题<br>解决办法：将文件的内容编码改为UTF8格式<br>4.’hexo sever’能够成功运行，但是localhost:4000无法访问<br>解决办法：执行hexo s -p 5000，改用其他端口启动</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A. 首先创建一个文件夹，如blog，用来存放hexo的配置文件等，然后进入blog进行操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化&lt;br&gt;右键 git bash，执行以下命令:&lt;br&gt;hexo init&lt;/li&gt;
&lt;li&gt;安装依赖包&lt;br&gt;npm install&lt;/li&gt;
&lt;li&gt;生成静态页面&lt;br&gt;hexo generate或者hexo g
    
    </summary>
    
    
      <category term="工具" scheme="http://liu-jiarui.github.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
